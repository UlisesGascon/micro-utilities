import { chunkArray } from '../src'

describe('array-to-chunks', () => {
  const array = [1,2,3,4,5,6,7,8,9]

  it('First argument must be an array', () => {
      expect(() => chunkArray(undefined, 1)).toThrow('arr must be an array')
      expect(() => chunkArray({}, 1)).toThrow('arr must be an array')
      expect(() => chunkArray(null, 1)).toThrow('arr must be an array')
      expect(() => chunkArray(new Set(), 1)).toThrow('arr must be an array')
      expect(() => chunkArray("1,2,3", 1)).toThrow('arr must be an array')
      expect(() => chunkArray("1,2,3", 1)).toThrow('arr must be an array')
    })

    // @TODO: Fix memory leak generated by this test
    // @SEE: https://github.com/UlisesGascon/micro-utilities/issues/8
    it.skip('Second argument must be a positive number', () => {
      expect(() => chunkArray(array)).toThrow('chunkSize must be a positive integer')
      expect(() => chunkArray(array, "1")).toThrow('chunkSize must be a positive integer')
      expect(() => chunkArray(array, -1)).toThrow('chunkSize must be a positive integer')
      expect(() => chunkArray(array, 0)).toThrow('chunkSize must be a positive integer')
    })

    it('Should chunk the array', () => {
      expect(chunkArray(array, 1)).toEqual([[1],[2],[3],[4],[5],[6],[7],[8],[9]])
      expect(chunkArray(array, 2)).toEqual([[1,2], [3,4], [5,6], [7,8], [9]])
      expect(chunkArray(array, 3)).toEqual([[1,2,3], [4,5,6], [7,8,9]])
      expect(chunkArray(array, 150)).toEqual([[1,2,3,4,5,6,7,8,9]])
    })

})
